// @mixin font-setting
//
// Usage: `@include font-setting('secondary')`
//
// $type = 'primary' - Version of font-setting. Options: primary | secondary
//
//
// Styleguide 2.1.1
@mixin font-setting($type: 'primary') {
  @if $type == 'secondary' {
    font-family: $font-family-secondary;
  } @else {
    font-family: $font-family-primary;
  }
}


// @mixin underlined-link
//
// `@include underlined-link`
//
// $hover-only = false - Whether this is a subtle or default variation. Options: true | false
//
// Styleguide 2.1.2
//
@mixin underlined-link($hover-only: false) {
  // Set color var
  $border-hover-color: $color-link-underline;
  @if ( $hover-only == false ) {
    $border-hover-color: $color-link-underline-hover;
    border-bottom: 1px solid $color-link-underline;
    box-shadow: inset 0 -1px 0 0 $color-link-underline;
  } @else {
    border-color: $color-link-underline;
  }
  transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;

  // hover state
  @media (hover: hover) {
    &:hover {
      border-bottom: 1px solid $border-hover-color;
      box-shadow: inset 0 -2px 0 0 $border-hover-color;
    }
  }

  &:active {
    border-bottom: 1px solid rgba($border-hover-color, .6);
    box-shadow: inset 0 -2px 0 0 rgba($border-hover-color, .6);
  }
}


// @mixin underlined-link-parent
//
// `@include underlined-link-parent`
//
// $hover-only = false - Whether or not this a subtle or default variation. Options: true | false
//
// Styleguide 2.1.3
//
@mixin underlined-link-parent($hover-only: false) {
  a:not(.t-links-unset) {
    @include underlined-link($hover-only);
  }
}


// @mixin mq
//
// `@include mq($from: bp-l)`
//
// $from = false -  {String | Boolean} One of $mq-breakpoints
// $until = false - {String | Boolean}  One of $mq-breakpoints
// $and = false - {String | Boolean}  Additional media query parameters
// $media-type - {String} ($mq-media-type) Media type: screen, printâ€¦
//
// Styleguide 2.1.4
//


// @mixin gap
//
// This is to account for the eminent deprecation of [`grid-gap`](https://developer.mozilla.org/en-US/docs/Web/CSS/gap). Some browsers honor `gap`, while others are living in the past with `grid-gap`. This keeps us working for both names. Eventually, we can remove this mixin in favor of just using gap. The new `gap` naming is introduced on Chrome 68+, Safari 11.2, Firefox 61+, and Edge 16+<br>Example: `.my-grid { @include gap($size-m) }`
//
// $size = $size-b - Size of gap
//
// Styleguide 2.1.3
//
@mixin gap($size: $size-b) {
  grid-gap: $size;
  gap: $size;
}


// @mixin row-gap
//
// This is to account for the eminent deprecation of [`grid-row-gap`]
//
// $size = $size-b - Size of gap
//
// Styleguide 2.1.3
//
@mixin row-gap($size: $size-b) {
  grid-row-gap: $size;
  row-gap: $size;
}


// @mixin col-gap
//
// This is to account for the eminent deprecation of [`grid-column-gap`]
//
// $size = $size-b - Size of gap
//
// Styleguide 2.1.3
//
@mixin col-gap($size: $size-b) {
  grid-column-gap: $size;
  column-gap: $size;
}

// @mixin color-classes
//
// Generate color helper classes based on a [map](https://sass-lang.com/documentation/values/maps)
//
// $color-map = '' - {Sass map} Ex: $color-map: ("black": $color-black-pure)
// $type = '' - {String} Either 'bg', 'text' or 'text-hover'
//
// Styleguide 2.1.3
//
@mixin color-classes($color-map, $type) {
  $property: 'color';
  @if ($type == 'bg') {
    $property:'background-color';
  }
  @each $color, $value in $color-map {
    @if ($type == 'text-hover') {
      .has-#{$type}-#{$color}:hover,
      .has-#{$type}-#{$color}:active {
        #{$property}: $value;
      }
    } @else {
      /* #{$value} */
      .has-#{$type}-#{$color} {
        #{$property}: $value;
      }
    }
  }
}
